===================
==== Toasted-8 ====
===================

=== INSTRUCTIONS ===
0: NOP                  -> (N)o (OP)eration
1: MW   reg, imm8/reg   -> reg = imm8/reg
2: LW   reg, [imm16/HL] -> reg = [HL/imm16]
3: SW   [imm16/HL], reg -> [HL/imm16] = reg
4: PUSH imm8/reg        -> [SP--] = imm8/reg
5: POP  reg             -> reg = [++SP]
6: LDA  [imm16]         -> HL = imm16
7: JNZ  imm8/reg        -> PC = HL if imm8/reg != 0 else NOP
8: INB  reg, imm8/reg   -> reg = PORT[imm8/reg]
9: OUTB imm8/reg, reg   -> PORT[imm8/reg] = reg
10: ADD^ reg, imm8/reg   -> reg = reg + imm8/reg
11: ADC^ reg, imm8/reg   -> reg = reg + imm8/reg + c
12: AND  reg, imm8/reg   -> reg = reg & imm8/reg
13: OR   reg, imm8/reg   -> reg = reg | imm8/reg
14: NOR  reg, imm8/reg   -> reg = ~(reg | imm8/reg)
15: CMP^ reg, imm8/reg   -> f = compare reg, imm8/reg (see below)
16: SBB^ reg, imm8/reg   -> reg = reg - imm8/reg - b


* imm8/16 are the byte(s) immediately following the instruction byte in memory
* with imm8/reg and imm16/HL, the choice is indicated by the y-bit
  (see INSTRUCTION LAYOUT)

^ these instructions load the (F)lags register

=== REGISTERS ===
A (0): GP register
B (1): GP register
C (2): GP register
D (3): GP register
L (4): GP register/(L)ow index register
H (5): GP register/(H)igh index register
Z (6): GP register
F (7): flags (LSB to MSB)
    LESS
    EQUAL
    CARRY
    BORROW

* Calling convention
    * A, B, C, D, Z for arguments
      * Use 16-bit pairs AB and CD if arguments are 16-bits wide
      * Skip register if necessary to pair registers together into 16 bits
    * Remaining arguments pushed to stack in order
    * Return value in Z

=== INSTRUCTION LAYOUT ===
Instruction layout is XXXXYZZZ where
X: 4-bit instruction identifier (see INSTRUCTIONS)
Y: 0 if argument is imm(8/16), 1 if argument is reg
Z: 3-bit register identifier of first register argument (see REGISTERS)

* instructions with reg, reg arguments have the second register encoded in the
  first three bits of the second instruction byte
* For LW/SW, the Y-bit indicates imm16 (0) and HL (1). Z-bits are ALWAYS reg.
* Instructions can be 1-3 bytes long
    * PUSH/POP with one register argument are one byte instructions
    * LW/SW with Y=0 (imm16) are 3 bytes each
    * LDA is always 3 bytes

=== MEMORY LAYOUT ===
0x0000..0x7FFF: GENERAL PURPOSE ROM
0x8000..0xBFFF: GENERAL PURPOSE RAM (BANKED)
0xC000..0xFDFF: GENERAL PURPOSE RAM
0xFC00..0xFEFF: STACK (RECOMMENDED), else GP RAM
0xFF00..0xFFF9: GENERAL PURPOSE RAM
0xFFFA..0xFFFA: MB/(M)emory (B)ank
0xFFFB..0xFFFB: UNUSED
0xFFFC..0xFFFD: SP/(S)tack (P)ointer
0xFFFE..0xFFFF: PC/(P)rogram (C)ounter

=== MEMORY BANKING ===
0x8000..0xBFFF can be swapped using the MB register, where MB=0 indicates that
the built-in RAM is in use. MB=1 maps to the built-in VRAM.

=== PORTS ===
PORTS are used to communicate with devices or by the JDH-8 itself. See
SPECIAL PORTS for a list of which ports are controlled by the JDH-8 and not
external devices.

=== SPECIAL PORTS ===
0x00: STATUS

=== STATUS REGISTER ===
The status register can be read/written with PORT 0 using the INB and OUTB
instructions. It contains control information about the current JDH-8 state.
Its bits are as follows, from LSB to MSB:
    UNUSED      (RW)
    ERROR       (RO)
    POWER       (RW)
    HALT        (RW)
